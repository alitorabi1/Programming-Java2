Graphical User Interface (GUI)
=======================
Java is equipped with many powerful, yet easy-to-use graphical user interface (GUI) components, such as the input and output dialog boxes. You can use these to make your programs attractive and user-friendly. 

Graphical User Interface (GUI) Components
=================================
Before introducing the various GUI components, we will use input and output dialog boxes to write a program to determine the area and perimeter of a rectangle. We will then discuss how to use additional GUI components to create a different graphical user interface to determine the area and perimeter of a rectangle.

The program in this Example 1 prompts the user to input the length and width of a rectangle and then displays its area (area = length * width; ) and perimeter (perimeter = 2 * (length + width); ). We will use the method showInputDialog to create an input dialog box and the method showMessageDialog to create an output dialog box. Recall that these methods are contained in the class JOptionPane and this class is contained in the package javax.swing.

The program in Example 1 works as follows: 

double width, length, area, perimeter; //Line 1
String lengthStr, widthStr, outputStr; //Line 2

The statements in Lines 1 and 2 declare various variables to manipulate the data. 

lengthStr = JOptionPane.showInputDialog("Enter the length: "); //Line 3

The statement in Line 3 displays the first dialog box of the sample run and prompts the user to enter the length of the rectangle. The entered length is assigned as a string to lengthStr. 

length = Double.parseDouble(lengthStr); //Line 4
The statement in Line 4 retrieves the length and stores it in the variable length.

widthStr = JOptionPane.showInputDialog("Enter the width: "); //Line 5
The statement in Line 5 displays the second dialog box of the sample run and prompts the user to enter the width of the rectangle. The entered width is assigned as a string to widthStr. 

width = Double.parseDouble(widthStr); //Line 6
The statement in Line 6 retrieves the width and stores it in the variable width.

area = length * width; //Line 7
The statement in Line 7 determines the area, 

perimeter = 2 * (length + width); //Line 8
and the statement in Line 8 determines the perimeter of the rectangle. 

outputStr = "Length: " + length + "\n" +
"Width: " + width + "\n" +
"Area: " + area + " square units\n" +
"Perimeter: " + perimeter + " units\n"; //Line 9

The statement in Line 9 creates the string containing the desired output and assigns it to outputStr. 

JOptionPane.showMessageDialog(null, outputStr,
"Rectangle",
JOptionPane.INFORMATION_MESSAGE); //Line 10

The statement in Line 10 uses the output dialog box to display the desired output

System.exit(0); //Line 11
Finally, the statement in Line 11 terminates the program.
/************************************************/

However, suppose that you want the program to display all the input and output in one dialog box.
In Java terminology, such a dialog box is called a graphical user interface (GUI), or simply a user interface. In this GUI, the user enters the length and width in the top two white boxes. When the user clicks the Calculate button, the program displays the area and the perimeter in their respective locations. When the user clicks the Exit button, the program terminates.

As you can see in Figure 2 (Java GUI components), the white areas used to get the input and show the results are called JTextFields. The labels for these text fields, such as Enter the length:, are called JLabels; the buttons Calculate and Exit are each called a JButton. All these components are placed in a window, called JFrame.

GUI components, such as labels, are placed in an area called the content pane of the window. You can think of a content pane as the inner area of the window, below the title bar and inside the border. You will also learn how to place these GUI components in the content pane of a window.


Creating a Window
==============
GUI components such as windows and labels are, in fact, objects. Recall that an object is an instance of a particular class. Therefore, these components (objects) are instances of a particular class type. JFrame is a class and the GUI component window can be created by using a JFrame object. Various attributes are associated with a window. For example:
• Every window has a title.
• Every window has width and height.


JFrame
========
The class JFrame provides various methods to control the attributes of a window. For example, it has methods to set the window title and methods to specify the height and width of the window. Table 3 describes some of the methods provided by the class JFrame.

There are two ways to make an application program create a window. The first way is to declare an object of type JFrame, instantiate the object, and then use various methods to manipulate the window. In this case, the object created can use the various applicable methods of the class.

The second way is to create the class containing the application program by extending the definition of the class JFrame; that is, the class containing the application program is built ‘‘on top of’’ the class JFrame. In Java, this way of creating a class uses the mechanism of inheritance. Inheritance means that a new class can be derived from or based on an already existing class. The new class ‘‘inherits’’ features such as methods from the existing class, which saves a lot of time for programmers. For example, we could define a new class RectangleProgram that would extend the definition of JFrame. The class RectangleProgram would be able to use the variables and methods from JFrame, and also add some functionality of its own (such as the ability to calculate the area and perimeter of a rectangle).

When you use inheritance, the class containing your application program will have more than one method. In addition to the method main, you will have at least one other method that will be used to create a window object containing the required GUI components (such as labels and text fields). This additional method is a special type of method called a constructor. A constructor is a method of a class that is automatically executed when an object of the class is created. Typically, a constructor is used to initialize an object. The name of the constructor is always the same as the name of the class. For example, the constructor for the class RectangleProgram would be named RectangleProgram.

Because inheritance is an important concept in programming languages such as Java, we will use the second way of creating a window. We will extend the definition of the class JFrame by using the modifier extends. For example, the definition of the class RectangleProgram, containing the application program to calculate the area and perimeter of a rectangle, is as follows:

public class RectangleProgram extends JFrame {
	public RectangleProgram() //constructor {
		//Necessary code
	}

	public static void main(String[] args) {
	//Code for the method main
	}
}


An important property of inheritance is that the class (called a subclass) that extends the definition of an existing class (called a superclass) inherits all the properties of the superclass. For example, all public methods of the superclass can be directly accessed in the subclass. In our example, the class RectangleProgram is a subclass of the class JFrame, so it can access the public methods of the class JFrame. 
Therefore, to set the title of the window to Area and Perimeter of a Rectangle, you use the method setTitle of the class JFrame as follows:

setTitle("Area and Perimeter of a Rectangle"); 	//Line 1

Similarly, the statement:
setSize(400, 300);		 //Line 2

Next, to display the window, you must invoke the method setVisible. The following statement accomplishes this:
setVisible(true); 		//Line 3

To terminate the application program when the user closes the window, use the following statement:
setDefaultCloseOperation(EXIT_ON_CLOSE); 	//Line 4

The statements in Lines 1, 2, 3, and 4 will be placed in the constructor (that is, in the method whose heading is public RectangleProgram()). Thus, you can write the constructor as follows:

public RectangleProgram()
{
   setTitle("Area and Perimeter of a Rectangle");
   setSize(400, 300);
   setDefaultCloseOperation(EXIT_ON_CLOSE);
   setVisible(true);
}

You could create a window by using an object of type JFrame. However, for our program, if we do so, then the window created will not have a title or the required size unless we specify the necessary statements similar to the ones in the preceding code.

Because RectangleProgram is also a class, we can create objects of type RectangleProgram. Because the class RectangleProgram extends the definition of the class JFrame, it inherits the properties of the class JFrame. If we create an object of type RectangleProgram, not only do we create a window, but the created window will also have a title and a specific size, and the window will be displayed when the program executes.


Consider the following statement:
	RectangleProgram rectObject = new RectangleProgram(); //Line 5

This statement creates the object rectObject of type RectangleProgram. The statement in Line 5 causes the window to appear on the screen. 

Let’s review the important points introduced in this section:
========================
• The preceding program has exactly one class: RectangleProgramOne.
• The class RectangleProgramOne contains the constructor RectangleProgramOne and the main method.
• You created the new class RectangleProgramOne by extending the existing class, JFrame. Therefore, JFrame is the superclass of RectangleProgramOne, and RectangleProgramOne is a subclass of JFrame.
• Whenever there is a superclass–subclass relationship, the subclass inherits all the data members and methods of the superclass. The methods setTitle, setSize, setVisible, and setDefaultCloseOperation are methods of the class JFrame, and these methods can be inherited by its subclasses.



Getting Access to the Content Pane
==========================
If you can visualize JFrame as a window, think of the content pane as the inner area of the window (below the title bar and inside the border). The class JFrame has the method getContentPane that you can use to access the content pane of the window. However, the class JFrame does not have the necessary tools to manage the components of the content pane. The components of the content pane are managed by declaring a reference variable of the Container type and then using the method getContentPane, as shown next.

Consider the following statements:

	Container pane; 	//Line 1
	pane = getContentPane();  //Line 2

The statement in Line 1 declares pane to be a reference variable of the Container type. 
The statement in Line 2 gets the content pane of the window as a container, that is, the reference variable pane now points to the content pane. You can now access the content pane to add GUI components to it by using the reference variable pane.

The statements in Lines 1 and 2 can be combined into one statement:
	Container pane = getContentPane(); 	//Line 3

If you look back at Figure 2, you will see that the labels, text fields, and buttons are arranged in five rows and two columns. To control the placement of GUI components in the content pane, you set the layout of the content pane. The layout used in Figure 2 is called the grid layout. The class Container provides the method setLayout, as described in Table 5, to set the layout of the content pane. To add components such as labels and text fields to the content pane, you use the method add of the class Container.


The class Container is contained in the package java.awt. To use this class in your program, you need to include one of the following statements:

	import java.awt.*;
or:

	import java.awt.Container;

As noted earlier, the method setLayout is used to set the layout of the content pane, pane. To set the layout of the container to a grid, you use the class GridLayout.

Consider the following statement:
	pane.setLayout(new GridLayout(5, 2));

This statement creates an object belonging to the class GridLayout and assigns that object as the layout of the content pane, pane, by invoking the setLayout method. Moreover, this statement sets the layout of the content pane, pane, to five rows and two columns. This allows you to add 10 components arranged in five rows and two columns.

Note that the GridLayout manager arranges GUI components in a matrix formation with the number of rows and columns defined by the constructor and that the components are placed left to right, starting with the first row. 
For example, in the statement 
pane.setLayout(new GridLayout(5, 2)); 
the expression new GridLayout(5, 2), invokes the constructor of the class GridLayout and sets the number of rows to 5 and the number of columns to 2. Additional layout managers are discussed later. Layout managers allow you to manage GUI components in a content pane.


If you do not specify a layout, Java uses a default layout. If you specify a layout, you must set the layout before adding any components. Once the layout is set, you can use the method add to add the components to the pane; this process is described in the next section.

JLabel
======
Now you will learn how to create labels and add them to the pane. We assume the following statements:
	Container pane = getContentPane();
	pane.setLayout(new GridLayout(4, 1));


Labels are objects of a particular class type. The Java class that you use to create labels is JLabel. Therefore, to create labels, you instantiate objects of type JLabel. The class JLabel is contained in the package javax.swing. 

Just like a window, various attributes are associated with a label. For example, every label has a title, width, and height. The class JLabel contains various methods to control the display of labels. Table 6 describes some of the methods provided by the class JLabel.

Consider the statements:
JLabel lengthL;
lengthL = new JLabel("Enter the length:", SwingConstants.RIGHT);

JLabel(String atr)
JLabel(String str, int align)
JLabel(String str, Icon ico, int align)

